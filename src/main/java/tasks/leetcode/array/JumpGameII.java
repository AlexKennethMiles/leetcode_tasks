package tasks.leetcode.array;

/**
 * Суть алгоритма в том, чтобы работать в пределах первоначально возможной дистанции,
 * и если в этом диапазоне будет найден новый максимальный предел, то (если ещё не достигли конца)
 * используем этот новый предел и увеличиваем счётчик jumps. Как только новый предел себя исчерпает,
 * повторяем обновление предела (если возможно) или достигаем конца массива.
 * В противном случае, достигнуть конца невозможно в контексте задачи "45. Jump Game II".
 */
public class JumpGameII {
    public static int jump(int[] nums) {
        int farthestJump = 0; // Максимальная дальность прыжка (дальность от начала массива)
        int jumps = 0; // Кол-во прыжков
        int end = 0; // Максимальная дистанция с позиции при текущем farthestJump
        for (int i = 0; i < nums.length - 1; i++) { // Проходим до предпоследнего элемента, так как мы работаем с прыжками
            farthestJump = Math.max(farthestJump, i + nums[i]); // Обновляем, если нашли самый дальнюю дистанцию
            if (i == end) { // Если достигли локального предела
                jumps++; // Увеличиваем кол-во прыжков
                end = farthestJump; // Сдвигаем предел дистанции на максимальны найденный
            }
        }
        return jumps;
    }
}
